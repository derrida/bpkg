#!/bin/bash

init() {
  PACO=$(type -P paco)
  [[ "$PACO" ]] || error "Missing dependency: 'paco'."
  [[ "$(type -P grep)" ]] || error "Missing dependency: 'grep'."
  [[ "$(type -P git)" ]] || error "Missing dependency: 'git'."
}

help() {
  echo "Usage: $0 [option] [package]"
  echo
  echo "    -s, --sync     - Synchronize package database"
  echo "    -i, --install  - Install the given packages"
  echo "    -l, --list     - List all installed packages"
  echo "    -h, --help     - Display this help screen"
  exit
}

info() {
  echo -e "\e[1;28m$1\e[0m"
}

error() {
  echo -e "\e[1;31mError:\e[0m $1"
  exit 1
}

read_args() {
  [[ $1 ]] || help
  packages=()
  while [[ $1 ]]; do
    case "$1" in
      '-s'|'--sync')    option=sync ;;
      '-i'|'--install') option=install ;;
      '-l'|'--list')    option=list ;;
      '-h'|'--help')    help ;;
      -*)               error "Unrecognized option '$1'." ;;
      *)                packages+=("$1") ;;
    esac
    shift
  done

  case "$option" in
    sync)       remote_sync ;;
    install)    pkg_install "${packages[@]}" ;;
    list)       pkg_list "${packages[@]}" ;;
    *)          help ;;
  esac
}

remote_sync() {
  info "Synchronizing package database with remote server."
}

pkg_install() {
  [[ $packages ]] || error "Must specify a package."
  info "Installing packages..."
  for pkg in "${packages[@]}"; do
    echo "Installing $pkg"
  done
}

pkg_list() {
  if [[ $1 ]]; then
    info "Listing installed packages matching '$1'..."
    paco -a1 | grep --color "$1" || error "No matches found for '$1'."
  else
    info "Listing all installed packages..."
    paco -a1 || error "No installed packages."
  fi
}

init
read_args "$@"
