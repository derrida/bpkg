#!/bin/bash

init() {
  # Paths to resources
  CFG_GLOBAL="/etc/bpkg.conf"
  CFG_LOCAL="${HOME}/.bpkg.conf"
  BIN_PACO="$(type -P paco)"
  BIN_GIT="$(type -P git)"
  BIN_GREP="$(type -P grep)"
  DIR_TEMP="/tmp/bpkg"

  # Check for required dependencies
  [[ "$BIN_PACO" ]] || error "Missing dependency: 'paco'."
  [[ "$BIN_GIT" ]] || error "Missing dependency: 'git'."
  [[ "$BIN_GREP" ]] || error "Missing dependency: 'grep'."

  # Source global and local configuration files
  [[ -f "$CFG_GLOBAL" ]] || error "No global configuration file '$CFG_GLOBAL'." 
    . "$CFG_GLOBAL" || error "Error parsing '$CFG_GLOBAL'."
  if [[ -f "$CFG_LOCAL" ]]; then
    . "$CFG_LOCAL" || error "Error parsing '$CFG_LOCAL'."
  fi

  # Check and create needed directories
  [[ -d "$DIR_DB" ]] || mkdir -p "$DIR_DB"
  [[ -d "$DIR_TEMP" ]] || mkdir -p "$DIR_TEMP"
}

pkg_list() {
  if [[ $1 ]]; then
    info "Listing installed packages matching '$1'..."
    paco -a1 | grep -i --color "$1" || error "No matches found for '$1'."
  else
    info "Listing all installed packages..."
    paco -a1 || error "No installed packages."
  fi
}


help() {
  echo "Usage: $0 [option] [package]"
  echo
  echo "    -s, --sync     - Synchronize package database"
  echo "    -i, --install  - Install the given packages"
  echo "    -l, --list     - List all installed packages"
  echo "    -h, --help     - Display this help screen"
  exit
}

info() {
  echo -e "\e[1;37m$1\e[0m"
}

warn() {
  echo -e "\e[1;33mWarning:\e[0m $1"
}

error() {
  echo -e "\e[0;31mError:\e[0m $1"
  exit 1
}

read_args() {
  [[ $1 ]] || pkg_list 
  packages=()
  while [[ $1 ]]; do
    case "$1" in
      '-s'|'--sync'|'sync')    option=sync ;;
      '-i'|'--install'|'install') option=install ;;
      '-l'|'--list'|'list')    option=list ;;
      '-h'|'--help'|'help')    help ;;
      '--')               shift; packages+=("$@"); break ;;
      -*)               error "Unrecognized option '$1'." ;;
      *)                packages+=("$1") ;;
    esac
    shift
  done

  case "$option" in
    sync)       remote_sync ;;
    install)    pkg_install "${packages[@]}" ;;
    list)       pkg_list "${packages[@]}" ;;
    help)       help ;;
    *)          pkg_list "${packages[@]}" ;;
  esac
}

remote_sync() {
  info "Synchronizing package database with remote server."
}

get_deps() {
  [[ "${#missing_deps[@]}" -le 500 ]] || error "Circular dependencies detected."
  . "${DIR_DB}/$1/pkg.info" || error "Problem with '$1' build script."

  for dep in "${depends[@]}"; do
    [[ $1 != "$dep" ]] || error "Package '$1' depends on itself."
    if ! paco "$dep" &>/dev/null; then
      missing_deps=("$dep" "${missing_deps[@]}")
      get_deps "$dep"
    fi
  done
}

pkg_install() {
  [[ $@ ]] || error "Must specify a package."
  for pkg in "$@"; do
    explicit_pkgs+=("$pkg")
    get_deps "$pkg"
    dep_table+=("$(echo " ${missing_deps[@]}")")
  done

  print_targets
}

print_targets() {
  targets=( $(echo "${explicit_pkgs[@]} ${dep_table[@]}" | tr ' ' '\n' | sort -u) )
  width="$(stty size)"
  width="${width##* }"
  begin_text="Targets(${#targets[@]}):  "
  indent_chars="${#begin_text}"
  current_chars="${#begin_text}"

  echo -n "$begin_text"
  for target in "${targets[@]}"; do
    ((current_chars+=${#target}+2))
    if [[ $current_chars -lt $width ]]; then
      echo -n "$target  " 
    else
      echo
      printf "%${indent_chars}s" " "
      echo -n "$target  "
      current_chars="$(($indent_chars+=${#target}+2))"
    fi
  done
  echo
}

init
read_args "$@"
