#!/bin/bash

init() {
  # Paths to resources
  CFG_GLOBAL="bpkg.conf"
  CFG_LOCAL="${HOME}/.bpkg.conf"
  BIN_PACO="$(type -P paco)"
  BIN_GIT="$(type -P git)"
  BIN_GREP="$(type -P grep)"
  TEMP="/tmp/bpkg"

  # Check for required dependencies
  [[ "$BIN_PACO" ]] || error "Missing dependency: 'paco'."
  [[ "$BIN_GIT" ]] || error "Missing dependency: 'git'."
  [[ "$BIN_GREP" ]] || error "Missing dependency: 'grep'."

  # Source global and local configuration files
  [[ -f "$CFG_GLOBAL" ]] && . "$CFG_GLOBAL" ||
    error "No global configuration file '$CFG_GLOBAL'."
  [[ -f "$CFG_LOCAL" ]] && . "$CFG_LOCAL"

  # Check and create needed directories
  [[ -d "$DB_ROOT" ]] || mkdir "$DB_ROOT"
  [[ -d "$TEMP" ]] || mkdir "$TEMP"
}

help() {
  echo "Usage: $0 [option] [package]"
  echo
  echo "    -s, --sync     - Synchronize package database"
  echo "    -i, --install  - Install the given packages"
  echo "    -l, --list     - List all installed packages"
  echo "    -h, --help     - Display this help screen"
  exit
}

info() {
  echo -e "\e[1;37m$1\e[0m"
}

warn() {
  echo -e "\e[1;33mWarning:\e[0m $1"
}

error() {
  echo -e "\e[0;31mError:\e[0m $1"
  exit 1
}

read_args() {
  [[ $1 ]] || help
  packages=()
  while [[ $1 ]]; do
    case "$1" in
      '-s'|'--sync')    option=sync ;;
      '-i'|'--install') option=install ;;
      '-l'|'--list')    option=list ;;
      '-h'|'--help')    help ;;
      -*)               error "Unrecognized option '$1'." ;;
      *)                packages+=("$1") ;;
    esac
    shift
  done

  case "$option" in
    sync)       remote_sync ;;
    install)    pkg_install "${packages[@]}" ;;
    list)       pkg_list "${packages[@]}" ;;
    *)          help ;;
  esac
}

remote_sync() {
  info "Synchronizing package database with remote server."
}

pkg_install() {
  [[ $packages ]] || error "Must specify a package."
  info "Installing packages..."
  for pkg in "${packages[@]}"; do
    info "Installing $pkg..."
    (cd "${DB_ROOT}/$pkg" &&
      . pkg.info || error "Problem with package metadata."
      . pkg.build || error "Problem with build script."
      pkgconfig )
  done
}

pkg_list() {
  if [[ $1 ]]; then
    info "Listing installed packages matching '$1'..."
    paco -a1 | grep --color "$1" || error "No matches found for '$1'."
  else
    info "Listing all installed packages..."
    paco -a1 || error "No installed packages."
  fi
}

init
read_args "$@"
